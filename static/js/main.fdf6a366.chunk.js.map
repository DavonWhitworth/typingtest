{"version":3,"sources":["useEventListener.js","typingtest.js","App.js","index.js"],"names":["useEventListener","eventName","handler","element","arguments","length","undefined","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","MainContainer","Styled","div","_templateObject","Object","taggedTemplateLiteral","DoneChar","text","_templateObject2","NotDoneChar","_templateObject3","UserFeedback","_templateObject4","App","words","_useState","useState","_useState2","slicedToArray","currentWord","setCurrentWord","_useState3","_useState4","userInput","setUserInput","_useState5","_useState6","termDef","setTermDef","_useState7","_useState8","gameActive","setGameActive","_useState9","_useState10","gameTime","setGameTime","_useState11","_useState12","timerActive","setTimerActive","_useState13","_useState14","netWPM","setNetWPM","_useState15","_useState16","roundStartTime","setRoundStartTime","_useState17","_useState18","wrongChar","setWrongChar","_useState19","_useState20","avgWPM","setavgWPM","_useState21","_useState22","sessionWPM","setsessionWPM","defSplit","avgNET","getDefinition","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","word","tempDef","wrap","_context","prev","next","axios","sent","JSON","stringify","data","meanings","definitions","definition","slice","abrupt","stop","_x","apply","this","setNewWord","str","Math","trunc","random","charAt","toUpperCase","endRound","timer","split","i","parseFloat","toFixed","_ref2","e","key","newRound","prevUserInput","prevwrongChar","setInterval","prevgameTime","calcWPM","time","wpmCalc","prevsessionWPM","concat","toConsumableArray","react_default","createElement","userSplit","completedCharsString","substring","completedCharsDiv","style","color","backgroundColor","incompletedCharsString","incompletedCharsDiv","Fragment","App_templateObject","Description","header","App_templateObject2","App_MainContainer","typingtest","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fdf6a366.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\r\n\r\n// Hook\r\nfunction useEventListener(eventName, handler, element = window) {\r\n  // Create a ref that stores handler\r\n  const savedHandler = useRef();\r\n  // Update ref.current value if handler changes.\r\n  // This allows our effect below to always get latest handler ...\r\n  // ... without us needing to pass it in effect deps array ...\r\n  // ... and potentially cause effect to re-run every render.\r\n  useEffect(() => {\r\n    savedHandler.current = handler;\r\n  }, [handler]);\r\n  useEffect(\r\n    () => {\r\n      // Make sure element supports addEventListener\r\n      // On\r\n      if (!savedHandler.current) savedHandler.current = handler;\r\n      const isSupported = element && element.addEventListener;\r\n      if (!isSupported) return;\r\n      // Create event listener that calls handler function stored in ref\r\n      const eventListener = (event) => savedHandler.current(event);\r\n      // Add event listener\r\n      element.addEventListener(eventName, eventListener);\r\n      // Remove event listener on cleanup\r\n      return () => {\r\n        element.removeEventListener(eventName, eventListener);\r\n      };\r\n    },\r\n    [eventName, element, savedHandler] // Re-run if eventName or element changes\r\n  );\r\n}\r\n\r\nexport default useEventListener;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Styles from \"./global.css\";\r\nimport Styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport useEventListener from \"./useEventListener\";\r\n//import Styles from './style.css';\r\n\r\n//Possible names: SpeedVocab, VocabTyper, SpeedTyper\r\n\r\nconst MainContainer = Styled.div`\r\n    height: 100%;\r\n    width: 60%;\r\n    color: #ACBFA4;\r\n    padding: 25px;\r\n    \r\nalign-items: center;\r\n    align-items: center;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border:solid;\r\n    border-radius: 15px;\r\n`;\r\n\r\nconst DoneChar = Styled.text``;\r\n\r\nconst NotDoneChar = Styled.text`\r\n    display: column;\r\n    text-align: center;\r\n    word-break: break-word;\r\n    padding: 5px;\r\n\r\n`;\r\n\r\nconst UserFeedback = Styled.div`\r\n    padding: 10px;\r\n    margin: 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nfunction App() {\r\n  const words = [\r\n    \"quantity\",\r\n    \"quality\",\r\n    \"inefficacious\",\r\n    \"abandon\",\r\n    \"authority\",\r\n    \"award\",\r\n    \"aware\",\r\n    \"awful\",\r\n    \"assignment\",\r\n    \"artistic\",\r\n    \"artist\",\r\n    \"battery\",\r\n    \"benefit\",\r\n    \"board\",\r\n    \"carefully\",\r\n    \"ascender\",\r\n    \"wellness\",\r\n    \"asthenia\",\r\n    \"gondolier\",\r\n    \"toilsome\",\r\n    \"briefcases\",\r\n    \"postbellum\",\r\n    \"margravates\",\r\n    \"rocamboles\",\r\n    \"teepee\",\r\n    \"cay\",\r\n    \"orphaned\",\r\n    \"width\",\r\n    \"azimuths\",\r\n    \"trails\",\r\n    \"receivership\",\r\n    \"competition\",\r\n    \"considerable\",\r\n    \"consistent\",\r\n    \"defendant\",\r\n    \"discrimination\",\r\n    \"dramatic\",\r\n    \"electronic\",\r\n    \"everybody\",\r\n    \"foundation\",\r\n    \"government\",\r\n    \"independent\",\r\n    \"involvement\",\r\n    \"landscape\",\r\n    \"location\",\r\n    \"manufacturer\",\r\n    \"management\",\r\n    \"maintenance\",\r\n    \"moderate\",\r\n    \"modern\",\r\n    \"modest\",\r\n    \"mystery\",\r\n    \"narrative\",\r\n    \"natural\",\r\n    \"necessary\",\r\n    \"neighbor\",\r\n    \"negotiation\",\r\n    \"negotiate\",\r\n    \"nonetheless\",\r\n    \"nothing\",\r\n    \"nuclear\",\r\n    \"observation\",\r\n    \"observe\",\r\n    \"observer\",\r\n    \"reform\",\r\n    \"occupation\",\r\n    \"occupy\",\r\n    \"organize\",\r\n    \"partnership\",\r\n    \"policy\",\r\n    \"political\",\r\n    \"pollution\",\r\n    \"presentation\",\r\n    \"rank\",\r\n    \"relax\",\r\n  ];\r\n\r\n  //capitalize given string for approriate grammer visual\r\n  function Capitalize(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n\r\n  const [currentWord, setCurrentWord] = useState(\"\"); //Capitalize(words[Math.trunc(Math.random() * words.length)])\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [termDef, setTermDef] = useState(\"\");\r\n  const baseURL = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n  const [gameActive, setGameActive] = useState(false);\r\n  const [gameTime, setGameTime] = useState(0);\r\n  const [timerActive, setTimerActive] = useState(false);\r\n  const [netWPM, setNetWPM] = useState(0);\r\n  const [roundStartTime, setRoundStartTime] = useState(0);\r\n  const [wrongChar, setWrongChar] = useState(0);\r\n  const [avgWPM, setavgWPM] = useState(0);\r\n  const [sessionWPM, setsessionWPM] = useState([]);\r\n  var defSplit = [];\r\n  var avgNET = 0;\r\n\r\n  const getDefinition = async (word) => {\r\n    setCurrentWord(word);\r\n    let tempDef = await axios(baseURL + word);\r\n    tempDef = JSON.stringify(\r\n      tempDef.data[0].meanings[0].definitions[0].definition\r\n    );\r\n    tempDef = tempDef.slice(1, -1);\r\n    setTermDef(tempDef);\r\n    return;\r\n  };\r\n\r\n  const setNewWord = () => {\r\n    //Helper function to avoid returning mismatched definition to term\r\n    let word = Capitalize(words[Math.trunc(Math.random() * words.length)]);\r\n    getDefinition(word);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setNewWord();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (userInput.length === termDef.length && gameActive) endRound(); //round (term) complete, end round, calculate wpm, setup next round\r\n    setGameActive(true);\r\n    if (gameActive && !timerActive) timer(); //start game timer, this makes only one timer active and then round time in calculated with subtracting time at start of each round\r\n    if (userInput.split(\"\").length === 1) setRoundStartTime(gameTime);\r\n  }, [userInput]);\r\n\r\n  useEffect(() => {\r\n    for (let i = 0; i < sessionWPM.length; i++) {\r\n      avgNET = parseFloat(avgNET) + parseFloat(sessionWPM[i]);\r\n    }\r\n    avgNET = parseFloat(avgNET / sessionWPM.length).toFixed(2);\r\n    setavgWPM(avgNET);\r\n  }, [sessionWPM]);\r\n\r\n  const onUserInput = ({ key: e }) => {\r\n    defSplit = termDef.split(\"\");\r\n    if (e === \"Escape\") {\r\n      //New round option\r\n      newRound();\r\n    } else if (e === \"Shift\") {\r\n      //Does not punish user for using shift\r\n      return;\r\n    } else if (e === \"Backspace\") {\r\n      setUserInput((prevUserInput) => prevUserInput.slice(0, -1));\r\n    } else if (e === defSplit[userInput.length]) {\r\n      setUserInput((prevUserInput) => prevUserInput + e);\r\n    } else setWrongChar((prevwrongChar) => prevwrongChar + 1);\r\n    return;\r\n  };\r\n\r\n  useEventListener(\"keydown\", onUserInput);\r\n\r\n  const timer = () => {\r\n    //Game timer, increases in 1/2 second intervals for more accuracy and incase a short term is completed under a second, quicker causes issues\r\n    setTimerActive(true);\r\n    setInterval(() => {\r\n      setGameTime((prevgameTime) => prevgameTime + 0.5);\r\n    }, 500);\r\n  };\r\n\r\n  const endRound = () => {\r\n    //fired when user fnishes the round, similar to newround but does not calculate WPM so incorrect speed is displayed\r\n\r\n    const roundTime = gameTime - roundStartTime;\r\n    calcWPM(roundTime);\r\n    setUserInput(\"\");\r\n    setWrongChar(0);\r\n    setNewWord();\r\n  };\r\n\r\n  const newRound = () => {\r\n    //fired when escape key is pushed\r\n    setUserInput(\"\");\r\n    setWrongChar(0);\r\n    setNewWord();\r\n  };\r\n\r\n  //( (# of char / 5)-errors ) / time(in minutes)\r\n  /*stardard way of calculating wpm*/\r\n\r\n  const calcWPM = (time) => {\r\n    defSplit = termDef.split(\"\");\r\n    let userSplit = userInput.split(\"\");\r\n    let a = userSplit.length / 5;\r\n    a = a - wrongChar;\r\n    if (a <= 0) a = 1;\r\n    const roundTime = time / 60;\r\n    const wpmCalc = parseFloat(a / roundTime).toFixed(2);\r\n    setNetWPM(wpmCalc);\r\n    setsessionWPM((prevsessionWPM) => [...prevsessionWPM, wpmCalc]);\r\n    return;\r\n  };\r\n\r\n  const TextViewer = () => {\r\n    //makes the divs for app view to show user progression through text\r\n    const userSplit = userInput.split(\"\");\r\n    const completedCharsString = userInput.substring(0, userSplit.length);\r\n    const completedCharsDiv = (\r\n      <DoneChar\r\n        style={{ color: \"rgb(255, 255, 255)\", backgroundColor: \"green\" }}\r\n      >\r\n        {\" \"}\r\n        {completedCharsString}\r\n      </DoneChar>\r\n    );\r\n    const incompletedCharsString = termDef.substring(userSplit.length);\r\n    const incompletedCharsDiv = (\r\n      <NotDoneChar style={{ color: \"rgb(255, 255, 255)\" }}>\r\n        {incompletedCharsString}\r\n      </NotDoneChar>\r\n    );\r\n    return (\r\n      <>\r\n        {completedCharsDiv}\r\n        {incompletedCharsDiv}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <MainContainer>\r\n      Term = {currentWord}\r\n      <br />\r\n      Definition =\r\n      <TextViewer />\r\n      <UserFeedback>\r\n        <br />\r\n        netWPM of previous term = {netWPM} <br />\r\n        Average netWPM for session = {avgWPM}\r\n      </UserFeedback>\r\n    </MainContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport Typingtest from \"./typingtest.js\";\nimport Styled from \"styled-components\";\n\nconst MainContainer = Styled.div`\n    padding-top: 100px;\n    padding-left: 25%;\n`;\nconst Description = Styled.header`\n    padding-top: 50px;\n    margin: 15px;\n    width: 500px\n    text-align: center;\n    transform: translate(0, -50%);\n    color: white;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <Description>\n        Start typing to begin, new wpm per term. Click the \"Escape\" key for a\n        new term.\n      </Description>\n      <MainContainer>\n        <Typingtest />\n      </MainContainer>\n    </div>\n  );\n}\n\nexport default App;\n// SettingUserInput(data)    from onchange on input\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//"],"sourceRoot":""}