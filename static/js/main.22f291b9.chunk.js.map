{"version":3,"sources":["useEventListener.js","typingtest.js","App.js","index.js"],"names":["useEventListener","eventName","handler","element","arguments","length","undefined","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","MainContainer","Styled","div","_templateObject","Object","taggedTemplateLiteral","DoneChar","text","_templateObject2","NotDoneChar","_templateObject3","UserFeedback","_templateObject4","App","words","_useState","useState","_useState2","slicedToArray","currentWord","setCurrentWord","_useState3","_useState4","userInput","setUserInput","_useState5","_useState6","termDef","setTermDef","_useState7","_useState8","gameActive","setGameActive","_useState9","_useState10","gameTime","setGameTime","_useState11","_useState12","timerActive","setTimerActive","_useState13","_useState14","netWPM","setNetWPM","_useState15","_useState16","roundStartTime","setRoundStartTime","_useState17","_useState18","wrongChar","setWrongChar","_useState19","_useState20","avgWPM","setavgWPM","_useState21","_useState22","setnumOfRounds","_useState23","_useState24","sessionWPM","setsessionWPM","defSplit","avgNET","getDefinition","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","word","tempDef","wrap","_context","prev","next","axios","sent","JSON","stringify","data","meanings","definitions","definition","slice","abrupt","stop","_x","apply","this","setNewWord","str","Math","trunc","random","charAt","toUpperCase","endRound","timer","split","i","parseFloat","toFixed","_ref2","e","key","newRound","prevUserInput","prevwrongChar","setInterval","prevgameTime","calcWPM","time","wpmCalc","prevnumOfRounds","prevsessionWPM","concat","toConsumableArray","react_default","createElement","userSplit","completedCharsString","substring","completedCharsDiv","style","color","backgroundColor","incompletedCharsString","incompletedCharsDiv","Fragment","App_templateObject","Description","header","App_templateObject2","App_MainContainer","typingtest","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.22f291b9.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\n\r\n// Hook\r\nfunction useEventListener(eventName, handler, element = window) {\r\n    // Create a ref that stores handler\r\n    const savedHandler = useRef();\r\n    // Update ref.current value if handler changes.\r\n    // This allows our effect below to always get latest handler ...\r\n    // ... without us needing to pass it in effect deps array ...\r\n    // ... and potentially cause effect to re-run every render.\r\n    useEffect(() => {\r\n        savedHandler.current = handler;\r\n    }, [handler]);\r\n    useEffect(\r\n        () => {\r\n            // Make sure element supports addEventListener\r\n            // On\r\n            if (!savedHandler.current) savedHandler.current = handler;\r\n            const isSupported = element && element.addEventListener;\r\n            if (!isSupported) return;\r\n            // Create event listener that calls handler function stored in ref\r\n            const eventListener = (event) => savedHandler.current(event);\r\n            // Add event listener\r\n            element.addEventListener(eventName, eventListener);\r\n            // Remove event listener on cleanup\r\n            return () => {\r\n                element.removeEventListener(eventName, eventListener);\r\n            };\r\n        },\r\n        [eventName, element, savedHandler] // Re-run if eventName or element changes\r\n    );\r\n}\r\n\r\n\r\nexport default useEventListener;\r\n","import React, { useState, useEffect } from \"react\"\r\nimport Styles from \"./global.css\";\r\nimport Styled from 'styled-components';\r\nimport axios from \"axios\";\r\nimport useEventListener from \"./useEventListener\";\r\n//import Styles from './style.css';\r\n\r\n\r\n//Possible names: SpeedVocab, VocabTyper, SpeedTyper\r\n\r\nconst MainContainer = Styled.div`\r\n    height: 100%;\r\n    width: 60%;\r\n    color: #ACBFA4;\r\n    padding: 25px;\r\n    \r\nalign-items: center;\r\n    align-items: center;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border:solid;\r\n    border-radius: 15px;\r\n`\r\n\r\nconst DoneChar = Styled.text``\r\n\r\n\r\nconst NotDoneChar = Styled.text`\r\n    display: column;\r\n    text-align: center;\r\n    word-break: break-word;\r\n    padding: 5px;\r\n\r\n`\r\n\r\nconst UserFeedback = Styled.div`\r\n    padding: 10px;\r\n    margin: 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nfunction App() {\r\n\r\n\r\n\r\n    const words = [\"quantity\", \"quality\", \"inefficacious\", \"abandon\", \"authority\", \"award\", \"aware\",\r\n        \"awful\", \"assignment\", \"artistic\", \"artist\", \"battery\", \"benefit\", \"board\", \"carefully\",\r\n        \"ascender\", \"wellness\", \"asthenia\", \"gondolier\", \"toilsome\", \"briefcases\", \"postbellum\", \"margravates\",\r\n        \"rocamboles\", \"teepee\", \"cay\", \"orphaned\", \"width\", \"azimuths\", \"trails\", \"receivership\",\r\n        \"competition\", \"considerable\", \"consistent\", \"defendant\", \"discrimination\", \"dramatic\", \"electronic\",\r\n        \"everybody\", \"foundation\", \"government\", \"independent\", \"involvement\", \"landscape\", \"location\", \"manufacturer\",\r\n        \"management\", \"maintenance\", \"moderate\", \"modern\", \"modest\", \"mystery\", \"narrative\", \"natural\", \"necessary\",\r\n        \"neighbor\", \"negotiation\", \"negotiate\", \"nonetheless\", \"nothing\", \"nuclear\", \"observation\", \"observe\", \"observer\",\r\n        \"reform\", \"occupation\", \"occupy\", \"organize\", \"partnership\", \"policy\",\r\n        \"political\", \"pollution\", \"presentation\", \"rank\", \"relax\"];\r\n\r\n    function Capitalize(str) { return (str.charAt(0).toUpperCase() + str.slice(1)); }; //capitalize given string for approriate grammer visual\r\n    const [currentWord, setCurrentWord] = useState(\"\"); //Capitalize(words[Math.trunc(Math.random() * words.length)])\r\n    const [userInput, setUserInput] = useState(\"\");\r\n    const [termDef, setTermDef] = useState(\"\");\r\n    const baseURL = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n    const [gameActive, setGameActive] = useState(false);\r\n    const [gameTime, setGameTime] = useState(0);\r\n    const [timerActive, setTimerActive] = useState(false);\r\n    const [netWPM, setNetWPM] = useState(0);\r\n    const [roundStartTime, setRoundStartTime] = useState(0);\r\n    const [wrongChar, setWrongChar] = useState(0);\r\n    const [avgWPM, setavgWPM] = useState(0);\r\n    const [numOfRounds, setnumOfRounds] = useState(0); //not used in mechanics anymore, just deugging logs\r\n    const [sessionWPM, setsessionWPM] = useState([]);\r\n    var defSplit = [];\r\n    var avgNET = 0;\r\n\r\n\r\n    const getDefinition = async (word) => {\r\n        setCurrentWord(word);\r\n        let tempDef = await axios(baseURL + word);\r\n        tempDef = JSON.stringify(tempDef.data[0].meanings[0].definitions[0].definition);\r\n        tempDef = tempDef.slice(1, -1);\r\n        setTermDef(tempDef);\r\n        return;\r\n    }\r\n\r\n    const setNewWord = () => { //Helper function to avoid returning mismatched definition to term\r\n        let word = Capitalize(words[Math.trunc(Math.random() * words.length)]);\r\n        getDefinition(word);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setNewWord();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (userInput.length === termDef.length && gameActive) endRound(); //round (term) complete, end round, calculate wpm, setup next round\r\n        setGameActive(true);\r\n        if (gameActive && !timerActive) timer(); //start game timer, this makes only one timer active and then round time in calculated with subtracting time at start of each round\r\n        if (userInput.split(\"\").length === 1) setRoundStartTime(gameTime);\r\n\r\n    }, [userInput]);\r\n\r\n    useEffect(() => {\r\n        for (let i = 0; i < sessionWPM.length; i++) {\r\n            avgNET = parseFloat(avgNET) + parseFloat(sessionWPM[i]);\r\n        }\r\n        avgNET = parseFloat(avgNET / sessionWPM.length).toFixed(2);\r\n        setavgWPM(avgNET)\r\n    }, [sessionWPM])\r\n\r\n    const onUserInput = ({ key: e }) => {\r\n        defSplit = termDef.split(\"\");\r\n        if (e === 'Escape') { //New round option\r\n            newRound();\r\n        } else if (e === 'Shift') { //Does not punish user for using shift\r\n            return;\r\n        } else if (e === 'Backspace') {\r\n            setUserInput(prevUserInput => prevUserInput.slice(0, -1));\r\n        } else if (e === defSplit[userInput.length]) {\r\n            setUserInput(prevUserInput => prevUserInput + e);\r\n        } else setWrongChar(prevwrongChar => prevwrongChar + 1);\r\n        return;\r\n    }\r\n\r\n    useEventListener(\"keydown\", onUserInput)\r\n\r\n    const timer = () => { //Game timer, increases in 1/2 second intervals for more accuracy and incase a short term is completed under a second, quicker causes issues\r\n        setTimerActive(true);\r\n        setInterval(() => {\r\n            setGameTime(prevgameTime => prevgameTime + 0.5);\r\n        }, 500);\r\n    }\r\n\r\n    const endRound = () => { //fired when user fnishes the round, similar to newround but does not calculate WPM so incorrect speed is displayed\r\n\r\n        const roundTime = gameTime - roundStartTime;\r\n        calcWPM(roundTime);\r\n        setUserInput(\"\");\r\n        setWrongChar(0);\r\n        setNewWord();\r\n\r\n    }\r\n\r\n    const newRound = () => { //fired when escape key is pushed\r\n        setUserInput(\"\");\r\n        setWrongChar(0);\r\n        setNewWord();\r\n    }\r\n\r\n\r\n    /*stardard way of calculating wpm*/ //( (# of char / 5)-errors ) / time(in minutes) \r\n    const calcWPM = (time) => {\r\n        defSplit = termDef.split(\"\");\r\n        let userSplit = userInput.split(\"\");\r\n        let a = userSplit.length / 5;\r\n        a = a - wrongChar;\r\n        if (a <= 0) a = 1;\r\n        const roundTime = time / 60;\r\n        const wpmCalc = parseFloat((a / roundTime)).toFixed(2);\r\n        setnumOfRounds(prevnumOfRounds => prevnumOfRounds + 1);\r\n        setNetWPM(wpmCalc);\r\n        setsessionWPM(prevsessionWPM => [...prevsessionWPM, wpmCalc]);\r\n        //console.log({ a }, { time }, { roundTime }, { wrongChar }); //Caculation variables - debugging\r\n        return;\r\n    }\r\n\r\n    const TextViewer = () => { //makes the divs for app view to show user progression through text\r\n        const userSplit = userInput.split(\"\");\r\n        const completedCharsString = userInput.substring(0, userSplit.length)\r\n        const completedCharsDiv = <DoneChar style={{ color: \"green\", backgroundColor: \"lightgrey\" }}> {completedCharsString}</DoneChar >\r\n        const incompletedCharsString = termDef.substring(userSplit.length)\r\n        const incompletedCharsDiv = <NotDoneChar style={{ color: \"rgb(255, 128, 128)\" }}>{incompletedCharsString}</NotDoneChar>\r\n        return <>{completedCharsDiv}{incompletedCharsDiv}</>;\r\n    }\r\n\r\n    return (\r\n            <MainContainer>\r\n                        Term = {currentWord}\r\n                        <br />\r\n                        Definition =\r\n                        <TextViewer />\r\n                    <UserFeedback>\r\n                        <br />\r\n                        netWPM of previous term = {netWPM} <br />\r\n                        Average netWPM for session = {avgWPM}\r\n                    </UserFeedback>\r\n            </MainContainer>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from \"react\";\nimport Typingtest from \"./typingtest.js\";\nimport Styled from \"styled-components\";\n\nconst MainContainer = Styled.div`\n    padding-top: 100px;\n    padding-left: 25%;\n`;\nconst Description = Styled.header`\n    padding-top: 50px;\n    margin: 15px;\n    width: 500px\n    text-align: center;\n    transform: translate(0, -50%);\n    color: white;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <Description>\n        Start typing to begin, new wpm per term. Click the \"Escape\" key for a\n        new term. (Does not effect avgWPM)\n      </Description>\n      <MainContainer>\n        <Typingtest />\n      </MainContainer>\n    </div>\n  );\n}\n\nexport default App;\n// SettingUserInput(data)    from onchange on input\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//"],"sourceRoot":""}