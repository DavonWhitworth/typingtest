{"version":3,"sources":["useEventListener.js","typingtest.js","App.js","index.js"],"names":["useEventListener","eventName","handler","element","arguments","length","undefined","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","MainContainer","Styled","div","_templateObject","Object","taggedTemplateLiteral","DoneChar","text","_templateObject2","NotDoneChar","_templateObject3","UserFeedback","_templateObject4","App","words","_useState","useState","_useState2","slicedToArray","currentWord","setCurrentWord","_useState3","_useState4","userInput","setUserInput","_useState5","_useState6","termDef","setTermDef","_useState7","_useState8","gameActive","setGameActive","_useState9","_useState10","gameTime","setGameTime","_useState11","_useState12","timerActive","setTimerActive","_useState13","_useState14","netWPM","setNetWPM","_useState15","_useState16","roundStartTime","setRoundStartTime","_useState17","_useState18","wrongChar","setWrongChar","_useState19","_useState20","avgWPM","setavgWPM","_useState21","_useState22","setnumOfRounds","_useState23","_useState24","sessionWPM","setsessionWPM","defSplit","avgNET","getDefinition","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","word","tempDef","wrap","_context","prev","next","axios","sent","JSON","stringify","data","meanings","definitions","definition","slice","abrupt","stop","_x","apply","this","setNewWord","str","Math","trunc","random","charAt","toUpperCase","endRound","timer","split","i","parseFloat","toFixed","_ref2","e","key","newRound","prevUserInput","prevwrongChar","setInterval","prevgameTime","calcWPM","time","wpmCalc","prevnumOfRounds","prevsessionWPM","concat","toConsumableArray","react_default","createElement","userSplit","completedCharsString","substring","completedCharsDiv","style","color","backgroundColor","incompletedCharsString","incompletedCharsDiv","Fragment","App_templateObject","Description","header","App_templateObject2","App_MainContainer","typingtest","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7af51b17.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\n\r\n// Hook\r\nfunction useEventListener(eventName, handler, element = window) {\r\n    // Create a ref that stores handler\r\n    const savedHandler = useRef();\r\n    // Update ref.current value if handler changes.\r\n    // This allows our effect below to always get latest handler ...\r\n    // ... without us needing to pass it in effect deps array ...\r\n    // ... and potentially cause effect to re-run every render.\r\n    useEffect(() => {\r\n        savedHandler.current = handler;\r\n    }, [handler]);\r\n    useEffect(\r\n        () => {\r\n            // Make sure element supports addEventListener\r\n            // On\r\n            if (!savedHandler.current) savedHandler.current = handler;\r\n            const isSupported = element && element.addEventListener;\r\n            if (!isSupported) return;\r\n            // Create event listener that calls handler function stored in ref\r\n            const eventListener = (event) => savedHandler.current(event);\r\n            // Add event listener\r\n            element.addEventListener(eventName, eventListener);\r\n            // Remove event listener on cleanup\r\n            return () => {\r\n                element.removeEventListener(eventName, eventListener);\r\n            };\r\n        },\r\n        [eventName, element, savedHandler] // Re-run if eventName or element changes\r\n    );\r\n}\r\n\r\n\r\nexport default useEventListener;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Styles from \"./global.css\";\r\nimport Styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport useEventListener from \"./useEventListener\";\r\n//import Styles from './style.css';\r\n\r\n//Possible names: SpeedVocab, VocabTyper, SpeedTyper\r\n\r\nconst MainContainer = Styled.div`\r\n    height: 100%;\r\n    width: 60%;\r\n    color: #ACBFA4;\r\n    padding: 25px;\r\n    \r\nalign-items: center;\r\n    align-items: center;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border:solid;\r\n    border-radius: 15px;\r\n`;\r\n\r\nconst DoneChar = Styled.text``;\r\n\r\nconst NotDoneChar = Styled.text`\r\n    display: column;\r\n    text-align: center;\r\n    word-break: break-word;\r\n    padding: 5px;\r\n\r\n`;\r\n\r\nconst UserFeedback = Styled.div`\r\n    padding: 10px;\r\n    margin: 5px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nfunction App() {\r\n  const words = [\r\n    \"quantity\",\r\n    \"quality\",\r\n    \"inefficacious\",\r\n    \"abandon\",\r\n    \"authority\",\r\n    \"award\",\r\n    \"aware\",\r\n    \"awful\",\r\n    \"assignment\",\r\n    \"artistic\",\r\n    \"artist\",\r\n    \"battery\",\r\n    \"benefit\",\r\n    \"board\",\r\n    \"carefully\",\r\n    \"ascender\",\r\n    \"wellness\",\r\n    \"asthenia\",\r\n    \"gondolier\",\r\n    \"toilsome\",\r\n    \"briefcases\",\r\n    \"postbellum\",\r\n    \"margravates\",\r\n    \"rocamboles\",\r\n    \"teepee\",\r\n    \"cay\",\r\n    \"orphaned\",\r\n    \"width\",\r\n    \"azimuths\",\r\n    \"trails\",\r\n    \"receivership\",\r\n    \"competition\",\r\n    \"considerable\",\r\n    \"consistent\",\r\n    \"defendant\",\r\n    \"discrimination\",\r\n    \"dramatic\",\r\n    \"electronic\",\r\n    \"everybody\",\r\n    \"foundation\",\r\n    \"government\",\r\n    \"independent\",\r\n    \"involvement\",\r\n    \"landscape\",\r\n    \"location\",\r\n    \"manufacturer\",\r\n    \"management\",\r\n    \"maintenance\",\r\n    \"moderate\",\r\n    \"modern\",\r\n    \"modest\",\r\n    \"mystery\",\r\n    \"narrative\",\r\n    \"natural\",\r\n    \"necessary\",\r\n    \"neighbor\",\r\n    \"negotiation\",\r\n    \"negotiate\",\r\n    \"nonetheless\",\r\n    \"nothing\",\r\n    \"nuclear\",\r\n    \"observation\",\r\n    \"observe\",\r\n    \"observer\",\r\n    \"reform\",\r\n    \"occupation\",\r\n    \"occupy\",\r\n    \"organize\",\r\n    \"partnership\",\r\n    \"policy\",\r\n    \"political\",\r\n    \"pollution\",\r\n    \"presentation\",\r\n    \"rank\",\r\n    \"relax\",\r\n  ];\r\n\r\n  function Capitalize(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  } //capitalize given string for approriate grammer visual\r\n  const [currentWord, setCurrentWord] = useState(\"\"); //Capitalize(words[Math.trunc(Math.random() * words.length)])\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [termDef, setTermDef] = useState(\"\");\r\n  const baseURL = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\r\n  const [gameActive, setGameActive] = useState(false);\r\n  const [gameTime, setGameTime] = useState(0);\r\n  const [timerActive, setTimerActive] = useState(false);\r\n  const [netWPM, setNetWPM] = useState(0);\r\n  const [roundStartTime, setRoundStartTime] = useState(0);\r\n  const [wrongChar, setWrongChar] = useState(0);\r\n  const [avgWPM, setavgWPM] = useState(0);\r\n  const [numOfRounds, setnumOfRounds] = useState(0); //not used in mechanics anymore, just deugging logs\r\n  const [sessionWPM, setsessionWPM] = useState([]);\r\n  var defSplit = [];\r\n  var avgNET = 0;\r\n\r\n  const getDefinition = async (word) => {\r\n    setCurrentWord(word);\r\n    let tempDef = await axios(baseURL + word);\r\n    tempDef = JSON.stringify(\r\n      tempDef.data[0].meanings[0].definitions[0].definition\r\n    );\r\n    tempDef = tempDef.slice(1, -1);\r\n    setTermDef(tempDef);\r\n    return;\r\n  };\r\n\r\n  const setNewWord = () => {\r\n    //Helper function to avoid returning mismatched definition to term\r\n    let word = Capitalize(words[Math.trunc(Math.random() * words.length)]);\r\n    getDefinition(word);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setNewWord();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (userInput.length === termDef.length && gameActive) endRound(); //round (term) complete, end round, calculate wpm, setup next round\r\n    setGameActive(true);\r\n    if (gameActive && !timerActive) timer(); //start game timer, this makes only one timer active and then round time in calculated with subtracting time at start of each round\r\n    if (userInput.split(\"\").length === 1) setRoundStartTime(gameTime);\r\n  }, [userInput]);\r\n\r\n  useEffect(() => {\r\n    for (let i = 0; i < sessionWPM.length; i++) {\r\n      avgNET = parseFloat(avgNET) + parseFloat(sessionWPM[i]);\r\n    }\r\n    avgNET = parseFloat(avgNET / sessionWPM.length).toFixed(2);\r\n    setavgWPM(avgNET);\r\n  }, [sessionWPM]);\r\n\r\n  const onUserInput = ({ key: e }) => {\r\n    defSplit = termDef.split(\"\");\r\n    if (e === \"Escape\") {\r\n      //New round option\r\n      newRound();\r\n    } else if (e === \"Shift\") {\r\n      //Does not punish user for using shift\r\n      return;\r\n    } else if (e === \"Backspace\") {\r\n      setUserInput((prevUserInput) => prevUserInput.slice(0, -1));\r\n    } else if (e === defSplit[userInput.length]) {\r\n      setUserInput((prevUserInput) => prevUserInput + e);\r\n    } else setWrongChar((prevwrongChar) => prevwrongChar + 1);\r\n    return;\r\n  };\r\n\r\n  useEventListener(\"keydown\", onUserInput);\r\n\r\n  const timer = () => {\r\n    //Game timer, increases in 1/2 second intervals for more accuracy and incase a short term is completed under a second, quicker causes issues\r\n    setTimerActive(true);\r\n    setInterval(() => {\r\n      setGameTime((prevgameTime) => prevgameTime + 0.5);\r\n    }, 500);\r\n  };\r\n\r\n  const endRound = () => {\r\n    //fired when user fnishes the round, similar to newround but does not calculate WPM so incorrect speed is displayed\r\n\r\n    const roundTime = gameTime - roundStartTime;\r\n    calcWPM(roundTime);\r\n    setUserInput(\"\");\r\n    setWrongChar(0);\r\n    setNewWord();\r\n  };\r\n\r\n  const newRound = () => {\r\n    //fired when escape key is pushed\r\n    setUserInput(\"\");\r\n    setWrongChar(0);\r\n    setNewWord();\r\n  }; //( (# of char / 5)-errors ) / time(in minutes)\r\n\r\n  /*stardard way of calculating wpm*/ const calcWPM = (time) => {\r\n    defSplit = termDef.split(\"\");\r\n    let userSplit = userInput.split(\"\");\r\n    let a = userSplit.length / 5;\r\n    a = a - wrongChar;\r\n    if (a <= 0) a = 1;\r\n    const roundTime = time / 60;\r\n    const wpmCalc = parseFloat(a / roundTime).toFixed(2);\r\n    setnumOfRounds((prevnumOfRounds) => prevnumOfRounds + 1);\r\n    setNetWPM(wpmCalc);\r\n    setsessionWPM((prevsessionWPM) => [...prevsessionWPM, wpmCalc]);\r\n    //console.log({ a }, { time }, { roundTime }, { wrongChar }); //Caculation variables - debugging\r\n    return;\r\n  };\r\n\r\n  const TextViewer = () => {\r\n    //makes the divs for app view to show user progression through text\r\n    const userSplit = userInput.split(\"\");\r\n    const completedCharsString = userInput.substring(0, userSplit.length);\r\n    const completedCharsDiv = (\r\n      <DoneChar style={{ color: \"green\", backgroundColor: \"lightgrey\" }}>\r\n        {\" \"}\r\n        {completedCharsString}\r\n      </DoneChar>\r\n    );\r\n    const incompletedCharsString = termDef.substring(userSplit.length);\r\n    const incompletedCharsDiv = (\r\n      <NotDoneChar style={{ color: \"rgb(255, 128, 128)\" }}>\r\n        {incompletedCharsString}\r\n      </NotDoneChar>\r\n    );\r\n    return (\r\n      <>\r\n        {completedCharsDiv}\r\n        {incompletedCharsDiv}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <MainContainer>\r\n      Term = {currentWord}\r\n      <br />\r\n      Definition =\r\n      <TextViewer />\r\n      <UserFeedback>\r\n        <br />\r\n        netWPM of previous term = {netWPM} <br />\r\n        Average netWPM for session = {avgWPM}\r\n      </UserFeedback>\r\n    </MainContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport Typingtest from \"./typingtest.js\";\nimport Styled from \"styled-components\";\n\nconst MainContainer = Styled.div`\n    padding-top: 100px;\n    padding-left: 25%;\n`;\nconst Description = Styled.header`\n    padding-top: 50px;\n    margin: 15px;\n    width: 500px\n    text-align: center;\n    transform: translate(0, -50%);\n    color: white;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <Description>\n        Start typing to begin, new wpm per term. Click the \"Escape\" key for a\n        new term. (Does not effect avgWPM)\n      </Description>\n      <MainContainer>\n        <Typingtest />\n      </MainContainer>\n    </div>\n  );\n}\n\nexport default App;\n// SettingUserInput(data)    from onchange on input\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//"],"sourceRoot":""}